# coding: utf-8

"""
    QUBO API solvers

    QUBO solvers from Meta Analytics  # noqa: E501

    OpenAPI spec version: v1
    Contact: rajesh@craftingdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SolverAPI(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_vars': 'int',
        'non_zero': 'int',
        'timeout': 'int',
        'min_max': 'int',
        'parameters': 'str',
        'solved_value': 'float',
        'solved_result': 'list[int]',
        'inputs': 'list[Points]'
    }

    attribute_map = {
        'num_vars': 'numVars',
        'non_zero': 'nonZero',
        'timeout': 'timeout',
        'min_max': 'minMax',
        'parameters': 'parameters',
        'solved_value': 'solvedValue',
        'solved_result': 'solvedResult',
        'inputs': 'inputs'
    }

    def __init__(self, num_vars=None, non_zero=None, timeout=None, min_max=None, parameters=None, solved_value=None, solved_result=None, inputs=None):  # noqa: E501
        """SolverAPI - a model defined in Swagger"""  # noqa: E501
        self._num_vars = None
        self._non_zero = None
        self._timeout = None
        self._min_max = None
        self._parameters = None
        self._solved_value = None
        self._solved_result = None
        self._inputs = None
        self.discriminator = None
        if num_vars is not None:
            self.num_vars = num_vars
        if non_zero is not None:
            self.non_zero = non_zero
        if timeout is not None:
            self.timeout = timeout
        if min_max is not None:
            self.min_max = min_max
        if parameters is not None:
            self.parameters = parameters
        if solved_value is not None:
            self.solved_value = solved_value
        if solved_result is not None:
            self.solved_result = solved_result
        if inputs is not None:
            self.inputs = inputs

    @property
    def num_vars(self):
        """Gets the num_vars of this SolverAPI.  # noqa: E501

        Number of variables in QUBO matrix  # noqa: E501

        :return: The num_vars of this SolverAPI.  # noqa: E501
        :rtype: int
        """
        return self._num_vars

    @num_vars.setter
    def num_vars(self, num_vars):
        """Sets the num_vars of this SolverAPI.

        Number of variables in QUBO matrix  # noqa: E501

        :param num_vars: The num_vars of this SolverAPI.  # noqa: E501
        :type: int
        """

        self._num_vars = num_vars

    @property
    def non_zero(self):
        """Gets the non_zero of this SolverAPI.  # noqa: E501

        Number of non-zero entries in QUBO matrix  # noqa: E501

        :return: The non_zero of this SolverAPI.  # noqa: E501
        :rtype: int
        """
        return self._non_zero

    @non_zero.setter
    def non_zero(self, non_zero):
        """Sets the non_zero of this SolverAPI.

        Number of non-zero entries in QUBO matrix  # noqa: E501

        :param non_zero: The non_zero of this SolverAPI.  # noqa: E501
        :type: int
        """

        self._non_zero = non_zero

    @property
    def timeout(self):
        """Gets the timeout of this SolverAPI.  # noqa: E501

        Number of seconds the algorithm can run  # noqa: E501

        :return: The timeout of this SolverAPI.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this SolverAPI.

        Number of seconds the algorithm can run  # noqa: E501

        :param timeout: The timeout of this SolverAPI.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def min_max(self):
        """Gets the min_max of this SolverAPI.  # noqa: E501

        Specificy minimize ( 0 ) or maximize ( 1 ). Default is set to 3600.  # noqa: E501

        :return: The min_max of this SolverAPI.  # noqa: E501
        :rtype: int
        """
        return self._min_max

    @min_max.setter
    def min_max(self, min_max):
        """Sets the min_max of this SolverAPI.

        Specificy minimize ( 0 ) or maximize ( 1 ). Default is set to 3600.  # noqa: E501

        :param min_max: The min_max of this SolverAPI.  # noqa: E501
        :type: int
        """

        self._min_max = min_max

    @property
    def parameters(self):
        """Gets the parameters of this SolverAPI.  # noqa: E501

        <br />-pr Path-Relinking enabled by default                <br />-T  Target -- defined local minimum or maximum              <br />-g  Greediness -- percentage between 0 and 1 ( default is 0 )              <br />-K  num_threads -- number of simultaneous searches to perform ( default to 1 )              <br />-pf Perturb Factor -- defaults to number of vars / 10. If at a minimum / max and attempt to escape               <br />-rl Restart Limit -- Number of times hit same value before restarting search. Similar to MST multi-start tabu search              <br />-sm Spincycle Multiplier -- Amount to multiple spincycle, if turned on. Another way to escape from local optima.              <br />-sp Spincycle Percentage -- between 0 and 1 ( default 0 ) -- affects speed and accuracy              <br />-it Inner Timelimit -- may speed up problems if more time is spent ( default 5 )              <br />-ar Accuracy Range -- accuracy vs speed -- default 5 -- between 1 and 20                <br />-am Accuracy Minimum -- define bottom end of accuracy. add range. default is 5, 1 is hill climbing  # noqa: E501

        :return: The parameters of this SolverAPI.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SolverAPI.

        <br />-pr Path-Relinking enabled by default                <br />-T  Target -- defined local minimum or maximum              <br />-g  Greediness -- percentage between 0 and 1 ( default is 0 )              <br />-K  num_threads -- number of simultaneous searches to perform ( default to 1 )              <br />-pf Perturb Factor -- defaults to number of vars / 10. If at a minimum / max and attempt to escape               <br />-rl Restart Limit -- Number of times hit same value before restarting search. Similar to MST multi-start tabu search              <br />-sm Spincycle Multiplier -- Amount to multiple spincycle, if turned on. Another way to escape from local optima.              <br />-sp Spincycle Percentage -- between 0 and 1 ( default 0 ) -- affects speed and accuracy              <br />-it Inner Timelimit -- may speed up problems if more time is spent ( default 5 )              <br />-ar Accuracy Range -- accuracy vs speed -- default 5 -- between 1 and 20                <br />-am Accuracy Minimum -- define bottom end of accuracy. add range. default is 5, 1 is hill climbing  # noqa: E501

        :param parameters: The parameters of this SolverAPI.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def solved_value(self):
        """Gets the solved_value of this SolverAPI.  # noqa: E501


        :return: The solved_value of this SolverAPI.  # noqa: E501
        :rtype: float
        """
        return self._solved_value

    @solved_value.setter
    def solved_value(self, solved_value):
        """Sets the solved_value of this SolverAPI.


        :param solved_value: The solved_value of this SolverAPI.  # noqa: E501
        :type: float
        """

        self._solved_value = solved_value

    @property
    def solved_result(self):
        """Gets the solved_result of this SolverAPI.  # noqa: E501


        :return: The solved_result of this SolverAPI.  # noqa: E501
        :rtype: list[int]
        """
        return self._solved_result

    @solved_result.setter
    def solved_result(self, solved_result):
        """Sets the solved_result of this SolverAPI.


        :param solved_result: The solved_result of this SolverAPI.  # noqa: E501
        :type: list[int]
        """

        self._solved_result = solved_result

    @property
    def inputs(self):
        """Gets the inputs of this SolverAPI.  # noqa: E501


        :return: The inputs of this SolverAPI.  # noqa: E501
        :rtype: list[Points]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this SolverAPI.


        :param inputs: The inputs of this SolverAPI.  # noqa: E501
        :type: list[Points]
        """

        self._inputs = inputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SolverAPI, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolverAPI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
