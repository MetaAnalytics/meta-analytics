# coding: utf-8

"""
    QUBO API solvers

    QUBO solvers from Meta Analytics  # noqa: E501

    OpenAPI spec version: v1
    Contact: rajesh@craftingdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SolverAsyncRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_name': 'str',
        'key_name': 'str',
        'solution_bucket_name': 'str',
        'solution_key_name': 'str',
        'region': 'str',
        'num_vars': 'int',
        'min_max': 'int',
        'non_zero': 'int',
        'timeout': 'int',
        'parameters': 'str'
    }

    attribute_map = {
        'bucket_name': 'bucketName',
        'key_name': 'keyName',
        'solution_bucket_name': 'solutionBucketName',
        'solution_key_name': 'solutionKeyName',
        'region': 'region',
        'num_vars': 'numVars',
        'min_max': 'minMax',
        'non_zero': 'nonZero',
        'timeout': 'timeout',
        'parameters': 'parameters'
    }

    def __init__(self, bucket_name=None, key_name=None, solution_bucket_name=None, solution_key_name=None, region=None, num_vars=None, min_max=None, non_zero=None, timeout=None, parameters=None):  # noqa: E501
        """SolverAsyncRequest - a model defined in Swagger"""  # noqa: E501
        self._bucket_name = None
        self._key_name = None
        self._solution_bucket_name = None
        self._solution_key_name = None
        self._region = None
        self._num_vars = None
        self._min_max = None
        self._non_zero = None
        self._timeout = None
        self._parameters = None
        self.discriminator = None
        if bucket_name is not None:
            self.bucket_name = bucket_name
        if key_name is not None:
            self.key_name = key_name
        if solution_bucket_name is not None:
            self.solution_bucket_name = solution_bucket_name
        if solution_key_name is not None:
            self.solution_key_name = solution_key_name
        if region is not None:
            self.region = region
        if num_vars is not None:
            self.num_vars = num_vars
        if min_max is not None:
            self.min_max = min_max
        if non_zero is not None:
            self.non_zero = non_zero
        if timeout is not None:
            self.timeout = timeout
        if parameters is not None:
            self.parameters = parameters

    @property
    def bucket_name(self):
        """Gets the bucket_name of this SolverAsyncRequest.  # noqa: E501

        The name of the S3 bucket to pull data from.  # noqa: E501

        :return: The bucket_name of this SolverAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this SolverAsyncRequest.

        The name of the S3 bucket to pull data from.  # noqa: E501

        :param bucket_name: The bucket_name of this SolverAsyncRequest.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def key_name(self):
        """Gets the key_name of this SolverAsyncRequest.  # noqa: E501

        S3 key name. This is the specific key in the bucket.  # noqa: E501

        :return: The key_name of this SolverAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this SolverAsyncRequest.

        S3 key name. This is the specific key in the bucket.  # noqa: E501

        :param key_name: The key_name of this SolverAsyncRequest.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    @property
    def solution_bucket_name(self):
        """Gets the solution_bucket_name of this SolverAsyncRequest.  # noqa: E501

        The name of the S3 bucket to place result data in. If empty or null, defaults to bucketName  # noqa: E501

        :return: The solution_bucket_name of this SolverAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._solution_bucket_name

    @solution_bucket_name.setter
    def solution_bucket_name(self, solution_bucket_name):
        """Sets the solution_bucket_name of this SolverAsyncRequest.

        The name of the S3 bucket to place result data in. If empty or null, defaults to bucketName  # noqa: E501

        :param solution_bucket_name: The solution_bucket_name of this SolverAsyncRequest.  # noqa: E501
        :type: str
        """

        self._solution_bucket_name = solution_bucket_name

    @property
    def solution_key_name(self):
        """Gets the solution_key_name of this SolverAsyncRequest.  # noqa: E501

        S3 key name. Key name for the result. Defaults to keyName.out if left empty.  # noqa: E501

        :return: The solution_key_name of this SolverAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._solution_key_name

    @solution_key_name.setter
    def solution_key_name(self, solution_key_name):
        """Sets the solution_key_name of this SolverAsyncRequest.

        S3 key name. Key name for the result. Defaults to keyName.out if left empty.  # noqa: E501

        :param solution_key_name: The solution_key_name of this SolverAsyncRequest.  # noqa: E501
        :type: str
        """

        self._solution_key_name = solution_key_name

    @property
    def region(self):
        """Gets the region of this SolverAsyncRequest.  # noqa: E501

        AWS Region that is used for authentication..  # noqa: E501

        :return: The region of this SolverAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SolverAsyncRequest.

        AWS Region that is used for authentication..  # noqa: E501

        :param region: The region of this SolverAsyncRequest.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def num_vars(self):
        """Gets the num_vars of this SolverAsyncRequest.  # noqa: E501

        Number of variables in the QUBO.  # noqa: E501

        :return: The num_vars of this SolverAsyncRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_vars

    @num_vars.setter
    def num_vars(self, num_vars):
        """Sets the num_vars of this SolverAsyncRequest.

        Number of variables in the QUBO.  # noqa: E501

        :param num_vars: The num_vars of this SolverAsyncRequest.  # noqa: E501
        :type: int
        """

        self._num_vars = num_vars

    @property
    def min_max(self):
        """Gets the min_max of this SolverAsyncRequest.  # noqa: E501

        Specify 0 for minimum, or 1 for maximum.  # noqa: E501

        :return: The min_max of this SolverAsyncRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_max

    @min_max.setter
    def min_max(self, min_max):
        """Sets the min_max of this SolverAsyncRequest.

        Specify 0 for minimum, or 1 for maximum.  # noqa: E501

        :param min_max: The min_max of this SolverAsyncRequest.  # noqa: E501
        :type: int
        """

        self._min_max = min_max

    @property
    def non_zero(self):
        """Gets the non_zero of this SolverAsyncRequest.  # noqa: E501

        Number of non zero elements in the QUBO.  # noqa: E501

        :return: The non_zero of this SolverAsyncRequest.  # noqa: E501
        :rtype: int
        """
        return self._non_zero

    @non_zero.setter
    def non_zero(self, non_zero):
        """Sets the non_zero of this SolverAsyncRequest.

        Number of non zero elements in the QUBO.  # noqa: E501

        :param non_zero: The non_zero of this SolverAsyncRequest.  # noqa: E501
        :type: int
        """

        self._non_zero = non_zero

    @property
    def timeout(self):
        """Gets the timeout of this SolverAsyncRequest.  # noqa: E501

        Max time in seconds the algorithm can run.  # noqa: E501

        :return: The timeout of this SolverAsyncRequest.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this SolverAsyncRequest.

        Max time in seconds the algorithm can run.  # noqa: E501

        :param timeout: The timeout of this SolverAsyncRequest.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def parameters(self):
        """Gets the parameters of this SolverAsyncRequest.  # noqa: E501

        Additional parameters. See definition of Solver3API for details.  # noqa: E501

        :return: The parameters of this SolverAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SolverAsyncRequest.

        Additional parameters. See definition of Solver3API for details.  # noqa: E501

        :param parameters: The parameters of this SolverAsyncRequest.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SolverAsyncRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolverAsyncRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
