# coding: utf-8

"""
    QUBO API solvers

    QUBO solvers from Meta Analytics  # noqa: E501

    OpenAPI spec version: v1
    Contact: rajesh@craftingdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SolverAsyncResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'str',
        'bucket_name': 'str',
        'qubo_key_name': 'str',
        'solution_bucket_name': 'str',
        'solution_key_name': 'str',
        'qubo_accepted': 'bool',
        'solution_httpurl': 'str',
        'solution_s3_uri': 'str'
    }

    attribute_map = {
        'region': 'region',
        'bucket_name': 'bucketName',
        'qubo_key_name': 'quboKeyName',
        'solution_bucket_name': 'solutionBucketName',
        'solution_key_name': 'solutionKeyName',
        'qubo_accepted': 'quboAccepted',
        'solution_httpurl': 'solutionHTTPURL',
        'solution_s3_uri': 'solutionS3URI'
    }

    def __init__(self, region=None, bucket_name=None, qubo_key_name=None, solution_bucket_name=None, solution_key_name=None, qubo_accepted=None, solution_httpurl=None, solution_s3_uri=None):  # noqa: E501
        """SolverAsyncResponse - a model defined in Swagger"""  # noqa: E501
        self._region = None
        self._bucket_name = None
        self._qubo_key_name = None
        self._solution_bucket_name = None
        self._solution_key_name = None
        self._qubo_accepted = None
        self._solution_httpurl = None
        self._solution_s3_uri = None
        self.discriminator = None
        if region is not None:
            self.region = region
        if bucket_name is not None:
            self.bucket_name = bucket_name
        if qubo_key_name is not None:
            self.qubo_key_name = qubo_key_name
        if solution_bucket_name is not None:
            self.solution_bucket_name = solution_bucket_name
        if solution_key_name is not None:
            self.solution_key_name = solution_key_name
        if qubo_accepted is not None:
            self.qubo_accepted = qubo_accepted
        if solution_httpurl is not None:
            self.solution_httpurl = solution_httpurl
        if solution_s3_uri is not None:
            self.solution_s3_uri = solution_s3_uri

    @property
    def region(self):
        """Gets the region of this SolverAsyncResponse.  # noqa: E501


        :return: The region of this SolverAsyncResponse.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SolverAsyncResponse.


        :param region: The region of this SolverAsyncResponse.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def bucket_name(self):
        """Gets the bucket_name of this SolverAsyncResponse.  # noqa: E501


        :return: The bucket_name of this SolverAsyncResponse.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this SolverAsyncResponse.


        :param bucket_name: The bucket_name of this SolverAsyncResponse.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def qubo_key_name(self):
        """Gets the qubo_key_name of this SolverAsyncResponse.  # noqa: E501


        :return: The qubo_key_name of this SolverAsyncResponse.  # noqa: E501
        :rtype: str
        """
        return self._qubo_key_name

    @qubo_key_name.setter
    def qubo_key_name(self, qubo_key_name):
        """Sets the qubo_key_name of this SolverAsyncResponse.


        :param qubo_key_name: The qubo_key_name of this SolverAsyncResponse.  # noqa: E501
        :type: str
        """

        self._qubo_key_name = qubo_key_name

    @property
    def solution_bucket_name(self):
        """Gets the solution_bucket_name of this SolverAsyncResponse.  # noqa: E501


        :return: The solution_bucket_name of this SolverAsyncResponse.  # noqa: E501
        :rtype: str
        """
        return self._solution_bucket_name

    @solution_bucket_name.setter
    def solution_bucket_name(self, solution_bucket_name):
        """Sets the solution_bucket_name of this SolverAsyncResponse.


        :param solution_bucket_name: The solution_bucket_name of this SolverAsyncResponse.  # noqa: E501
        :type: str
        """

        self._solution_bucket_name = solution_bucket_name

    @property
    def solution_key_name(self):
        """Gets the solution_key_name of this SolverAsyncResponse.  # noqa: E501


        :return: The solution_key_name of this SolverAsyncResponse.  # noqa: E501
        :rtype: str
        """
        return self._solution_key_name

    @solution_key_name.setter
    def solution_key_name(self, solution_key_name):
        """Sets the solution_key_name of this SolverAsyncResponse.


        :param solution_key_name: The solution_key_name of this SolverAsyncResponse.  # noqa: E501
        :type: str
        """

        self._solution_key_name = solution_key_name

    @property
    def qubo_accepted(self):
        """Gets the qubo_accepted of this SolverAsyncResponse.  # noqa: E501


        :return: The qubo_accepted of this SolverAsyncResponse.  # noqa: E501
        :rtype: bool
        """
        return self._qubo_accepted

    @qubo_accepted.setter
    def qubo_accepted(self, qubo_accepted):
        """Sets the qubo_accepted of this SolverAsyncResponse.


        :param qubo_accepted: The qubo_accepted of this SolverAsyncResponse.  # noqa: E501
        :type: bool
        """

        self._qubo_accepted = qubo_accepted

    @property
    def solution_httpurl(self):
        """Gets the solution_httpurl of this SolverAsyncResponse.  # noqa: E501


        :return: The solution_httpurl of this SolverAsyncResponse.  # noqa: E501
        :rtype: str
        """
        return self._solution_httpurl

    @solution_httpurl.setter
    def solution_httpurl(self, solution_httpurl):
        """Sets the solution_httpurl of this SolverAsyncResponse.


        :param solution_httpurl: The solution_httpurl of this SolverAsyncResponse.  # noqa: E501
        :type: str
        """

        self._solution_httpurl = solution_httpurl

    @property
    def solution_s3_uri(self):
        """Gets the solution_s3_uri of this SolverAsyncResponse.  # noqa: E501


        :return: The solution_s3_uri of this SolverAsyncResponse.  # noqa: E501
        :rtype: str
        """
        return self._solution_s3_uri

    @solution_s3_uri.setter
    def solution_s3_uri(self, solution_s3_uri):
        """Sets the solution_s3_uri of this SolverAsyncResponse.


        :param solution_s3_uri: The solution_s3_uri of this SolverAsyncResponse.  # noqa: E501
        :type: str
        """

        self._solution_s3_uri = solution_s3_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SolverAsyncResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolverAsyncResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
